struct PathsFast
{
    int fx, fy, fz;
    vector < Edge > e;
    map < int, map < int, map < int, bool > > > was, vis;
    map < int, map < int, map < int, Polynomial > > > dp;
    Polynomial res;
    map < int, int > character;
    vector <Edge > path;
    vector < pair < int, pair < int, int > > > ord;

    PathsFast () {}

    PathsFast (int _fx, int _fy, int _fz, const vector < Edge > & _e): fx(_fx), fy(_fy), fz(_fz), e(_e) {}

    bool isInside(int x, int y, int z)
    {
        return abs(x) < K && abs(y) < K && abs(z) < K;
    }

    void dfs1(int x, int y, int z)
    {
        if (!isInside(x, y, z))
            return;
        if (was[x][y][z])
            return;
        was[x][y][z] = true;
        for (auto it : e)
        {
            int tx = x - it.dx;
            int ty = y - it.dy;
            int tz = z - it.dz;
            if (it.canUse(tx, ty, tz))
                dfs1(tx, ty, tz);
        }
    }

    void dfs2(int x, int y, int z)
    {
        if (!was[x][y][z] || vis[x][y][z])
            return;
        vis[x][y][z] = true;
        for (auto it : e)
        {
            if (it.canUse(x, y, z))
            {
                dfs2(x + it.dx, y + it.dy, z + it.dz);
            }
        }
        ord.pb({x, {y, z}});
    }
    void calc(int x1, int y1, int z1)
    {
        dfs2(x1, y1, z1);
        reverse(all(ord));
        dp[x1][y1][z1] = Polynomial(1);
        for (auto pt : ord)
        {
            int x = pt.first;
            int y = pt.second.first;
            int z = pt.second.second;
            for (auto it : e)
            {
                if (!it.canUse(x, y, z))
                    continue;
                if (it.isWeighted)
                {
                    int id;
                    if (it.type == FLOOR)
                        id = it.firstID + z - 1;
                    else
                        id = it.firstID + y;
                    Polynomial cur;
                    map < int, int > mp;
                    mp[id]++;
                    cur.p[mp]++;
                    cur *= dp[x][y][z];
                    dp[x + it.dx][y + it.dy][z + it.dz] += cur;
                }
                else
                    dp[x + it.dx][y + it.dy][z + it.dz] += dp[x][y][z];
            }
        }
        res = dp[fx][fy][fz];
        cerr << "Shika supa hard" << endl;
    }
};
